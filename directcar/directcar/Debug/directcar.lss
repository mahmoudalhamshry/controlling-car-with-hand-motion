
directcar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000076e  00000802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007e  0080007e  00000820  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c80  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c66  00000000  00000000  00002f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000586  00000000  00000000  00003e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000caf  00000000  00000000  000043e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 03 	call	0x730	; 0x730 <main>
  8a:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CAR_INIT>:



void CAR_INIT(void)
{
	UART_init();
  92:	0e 94 9f 03 	call	0x73e	; 0x73e <UART_init>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);//rx
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);//tx
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	//pin directions
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);//en1
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);//en2
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);//en2
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	67 e0       	ldi	r22, 0x07	; 7
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>

	
	
	
	DIO_setPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_OUTPUT);//en1
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	64 e0       	ldi	r22, 0x04	; 4
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);//en2
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	65 e0       	ldi	r22, 0x05	; 5
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);//motor1
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	63 e0       	ldi	r22, 0x03	; 3
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);//motor1
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);//motor2
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);//motor2
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	66 e0       	ldi	r22, 0x06	; 6
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	66 e0       	ldi	r22, 0x06	; 6
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	64 e0       	ldi	r22, 0x04	; 4
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	65 e0       	ldi	r22, 0x05	; 5
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	66 e0       	ldi	r22, 0x06	; 6
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	67 e0       	ldi	r22, 0x07	; 7
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	63 e0       	ldi	r22, 0x03	; 3
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_setPinDirection>
	
	
	LCD_init();
 154:	0e 94 03 03 	call	0x606	; 0x606 <LCD_init>
 158:	08 95       	ret

0000015a <CAR_START>:
}

void CAR_START(u8* temp)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <CAR_START+0x6>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_HIGH);//en1
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	64 e0       	ldi	r22, 0x04	; 4
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_HIGH);//en2
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	65 e0       	ldi	r22, 0x05	; 5
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	
	UART_RxChar(&temp);
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_RxChar>
	
	
	
	if (temp=='a')
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	81 36       	cpi	r24, 0x61	; 97
 18a:	91 05       	cpc	r25, r1
 18c:	51 f5       	brne	.+84     	; 0x1e2 <CAR_START+0x88>
	{//RIGHT
		
		LCD_clear();
 18e:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_clear>
		LCD_writeString("RIGHT");
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_writeString>
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	63 e0       	ldi	r22, 0x03	; 3
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>

		
		DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);//motor1 CLOCK WISE
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);//motor1
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);//motor2 ANTI CLOCK WISE
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	65 e0       	ldi	r22, 0x05	; 5
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);//moto
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 1e0:	b3 c0       	rjmp	.+358    	; 0x348 <CAR_START+0x1ee>
	}
	else if (temp=='b')//forward
 1e2:	82 36       	cpi	r24, 0x62	; 98
 1e4:	91 05       	cpc	r25, r1
 1e6:	51 f5       	brne	.+84     	; 0x23c <CAR_START+0xe2>
	{
		LCD_clear();
 1e8:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_clear>
		LCD_writeString("FORWAED");
 1ec:	86 e6       	ldi	r24, 0x66	; 102
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_writeString>
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		

		DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);//motor1 CLOCK WISE
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);//motor1
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);//motor2 ANTI CLOCK WISE
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	65 e0       	ldi	r22, 0x05	; 5
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);//moto		}
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	66 e0       	ldi	r22, 0x06	; 6
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 23a:	86 c0       	rjmp	.+268    	; 0x348 <CAR_START+0x1ee>
}
else if(temp =='c')//stop
 23c:	83 36       	cpi	r24, 0x63	; 99
 23e:	91 05       	cpc	r25, r1
 240:	51 f5       	brne	.+84     	; 0x296 <CAR_START+0x13c>
{
	LCD_clear();
 242:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_clear>
	LCD_writeString("IDLE");
 246:	8e e6       	ldi	r24, 0x6E	; 110
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_writeString>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	67 e0       	ldi	r22, 0x07	; 7
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>

	
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);//motor1 CLOCK WISE
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);//motor1
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);//motor2 ANTI CLOCK WISE
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	65 e0       	ldi	r22, 0x05	; 5
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);//moto		}
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 294:	59 c0       	rjmp	.+178    	; 0x348 <CAR_START+0x1ee>
}
else if(temp =='d')//left
 296:	84 36       	cpi	r24, 0x64	; 100
 298:	91 05       	cpc	r25, r1
 29a:	51 f5       	brne	.+84     	; 0x2f0 <CAR_START+0x196>
{
	LCD_clear();
 29c:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_clear>
	LCD_writeString("LEFT");
 2a0:	83 e7       	ldi	r24, 0x73	; 115
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_writeString>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>

	
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);//motor1 CLOCK WISE
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);//motor1
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	64 e0       	ldi	r22, 0x04	; 4
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);//motor2 ANTI CLOCK WISE
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	65 e0       	ldi	r22, 0x05	; 5
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);//moto		}
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	66 e0       	ldi	r22, 0x06	; 6
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 2ee:	2c c0       	rjmp	.+88     	; 0x348 <CAR_START+0x1ee>
}

else if(temp =='e')//left
 2f0:	85 36       	cpi	r24, 0x65	; 101
 2f2:	91 05       	cpc	r25, r1
 2f4:	49 f5       	brne	.+82     	; 0x348 <CAR_START+0x1ee>
{
	LCD_clear();
 2f6:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_clear>
	LCD_writeString("BACK");
 2fa:	88 e7       	ldi	r24, 0x78	; 120
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_writeString>
	DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	
	DIO_setPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);//motor1 CLOCK WISE
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);//motor1
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);//motor2 ANTI CLOCK WISE
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	65 e0       	ldi	r22, 0x05	; 5
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
DIO_setPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH);//moto		}
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	66 e0       	ldi	r22, 0x06	; 6
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <DIO_setPinDirection>:


/* Pin Apis */								   
void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT) || 
 352:	84 30       	cpi	r24, 0x04	; 4
 354:	08 f0       	brcs	.+2      	; 0x358 <DIO_setPinDirection+0x6>
 356:	72 c0       	rjmp	.+228    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 358:	68 30       	cpi	r22, 0x08	; 8
 35a:	08 f0       	brcs	.+2      	; 0x35e <DIO_setPinDirection+0xc>
 35c:	6f c0       	rjmp	.+222    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 35e:	42 30       	cpi	r20, 0x02	; 2
 360:	08 f0       	brcs	.+2      	; 0x364 <DIO_setPinDirection+0x12>
 362:	6c c0       	rjmp	.+216    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
   (PinDirection == DIO_PIN_INPUT)))
   {
	   switch(PortId)
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	01 f1       	breq	.+64     	; 0x3a8 <DIO_setPinDirection+0x56>
 368:	30 f0       	brcs	.+12     	; 0x376 <DIO_setPinDirection+0x24>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	b1 f1       	breq	.+108    	; 0x3da <DIO_setPinDirection+0x88>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	09 f4       	brne	.+2      	; 0x374 <DIO_setPinDirection+0x22>
 372:	4c c0       	rjmp	.+152    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 374:	08 95       	ret
	{
		case 0 :
		if(DIO_PIN_OUTPUT == PinDirection)
 376:	41 30       	cpi	r20, 0x01	; 1
 378:	59 f4       	brne	.+22     	; 0x390 <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA, PinId);
 37a:	2a b3       	in	r18, 0x1a	; 26
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_setPinDirection+0x34>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_setPinDirection+0x30>
 38a:	82 2b       	or	r24, r18
 38c:	8a bb       	out	0x1a, r24	; 26
 38e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA, PinId);
 390:	2a b3       	in	r18, 0x1a	; 26
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_setPinDirection+0x4a>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_setPinDirection+0x46>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	8a bb       	out	0x1a, r24	; 26
 3a6:	08 95       	ret
		}
		break;
		
		case 1 :
		if(DIO_PIN_OUTPUT == PinDirection)
 3a8:	41 30       	cpi	r20, 0x01	; 1
 3aa:	59 f4       	brne	.+22     	; 0x3c2 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB, PinId);
 3ac:	27 b3       	in	r18, 0x17	; 23
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_setPinDirection+0x66>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_setPinDirection+0x62>
 3bc:	82 2b       	or	r24, r18
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB, PinId);
 3c2:	27 b3       	in	r18, 0x17	; 23
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_setPinDirection+0x7c>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_setPinDirection+0x78>
 3d2:	80 95       	com	r24
 3d4:	82 23       	and	r24, r18
 3d6:	87 bb       	out	0x17, r24	; 23
 3d8:	08 95       	ret
		}
		break;
		
		case 2 :
		if(DIO_PIN_OUTPUT == PinDirection)
 3da:	41 30       	cpi	r20, 0x01	; 1
 3dc:	59 f4       	brne	.+22     	; 0x3f4 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC, PinId);
 3de:	24 b3       	in	r18, 0x14	; 20
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_setPinDirection+0x98>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_setPinDirection+0x94>
 3ee:	82 2b       	or	r24, r18
 3f0:	84 bb       	out	0x14, r24	; 20
 3f2:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC, PinId);
 3f4:	24 b3       	in	r18, 0x14	; 20
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_setPinDirection+0xaa>
 404:	80 95       	com	r24
 406:	82 23       	and	r24, r18
 408:	84 bb       	out	0x14, r24	; 20
 40a:	08 95       	ret
		}
		break;
		
		case 3 :
		if(DIO_PIN_OUTPUT == PinDirection)
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	59 f4       	brne	.+22     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			SET_BIT(DDRD, PinId);
 410:	21 b3       	in	r18, 0x11	; 17
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	81 bb       	out	0x11, r24	; 17
 424:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD, PinId);
 426:	21 b3       	in	r18, 0x11	; 17
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	81 bb       	out	0x11, r24	; 17
 43c:	08 95       	ret

0000043e <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH) || (PinValue == DIO_PIN_LOW)))
 43e:	84 30       	cpi	r24, 0x04	; 4
 440:	08 f0       	brcs	.+2      	; 0x444 <DIO_setPinValue+0x6>
 442:	72 c0       	rjmp	.+228    	; 0x528 <DIO_setPinValue+0xea>
 444:	68 30       	cpi	r22, 0x08	; 8
 446:	08 f0       	brcs	.+2      	; 0x44a <DIO_setPinValue+0xc>
 448:	6f c0       	rjmp	.+222    	; 0x528 <DIO_setPinValue+0xea>
 44a:	42 30       	cpi	r20, 0x02	; 2
 44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_setPinValue+0x12>
 44e:	6c c0       	rjmp	.+216    	; 0x528 <DIO_setPinValue+0xea>
	{
		switch(PortId)
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	01 f1       	breq	.+64     	; 0x494 <DIO_setPinValue+0x56>
 454:	30 f0       	brcs	.+12     	; 0x462 <DIO_setPinValue+0x24>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	b1 f1       	breq	.+108    	; 0x4c6 <DIO_setPinValue+0x88>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_setPinValue+0x22>
 45e:	4c c0       	rjmp	.+152    	; 0x4f8 <DIO_setPinValue+0xba>
 460:	08 95       	ret
		{
			case 0: //DIO_PORTA
			if (DIO_PIN_HIGH == PinValue)
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	59 f4       	brne	.+22     	; 0x47c <DIO_setPinValue+0x3e>
			{
				SET_BIT(PORTA,PinId);
 466:	2b b3       	in	r18, 0x1b	; 27
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_setPinValue+0x34>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_setPinValue+0x30>
 476:	82 2b       	or	r24, r18
 478:	8b bb       	out	0x1b, r24	; 27
 47a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,PinId);
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_setPinValue+0x4a>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_setPinValue+0x46>
 48c:	80 95       	com	r24
 48e:	82 23       	and	r24, r18
 490:	8b bb       	out	0x1b, r24	; 27
 492:	08 95       	ret
			}
			break;
			
			case 1: //DIO_PORTB
			if (DIO_PIN_HIGH == PinValue)
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	59 f4       	brne	.+22     	; 0x4ae <DIO_setPinValue+0x70>
			{
				SET_BIT(PORTB,PinId);
 498:	28 b3       	in	r18, 0x18	; 24
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_setPinValue+0x66>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_setPinValue+0x62>
 4a8:	82 2b       	or	r24, r18
 4aa:	88 bb       	out	0x18, r24	; 24
 4ac:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,PinId);
 4ae:	28 b3       	in	r18, 0x18	; 24
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_setPinValue+0x7c>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_setPinValue+0x78>
 4be:	80 95       	com	r24
 4c0:	82 23       	and	r24, r18
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	08 95       	ret
			}
			break;
			
			case 2: //DIO_PORTC
			if (DIO_PIN_HIGH == PinValue)
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	59 f4       	brne	.+22     	; 0x4e0 <DIO_setPinValue+0xa2>
			{
				SET_BIT(PORTC,PinId);
 4ca:	25 b3       	in	r18, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_setPinValue+0x98>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_setPinValue+0x94>
 4da:	82 2b       	or	r24, r18
 4dc:	85 bb       	out	0x15, r24	; 21
 4de:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,PinId);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_setPinValue+0xae>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_setPinValue+0xaa>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	85 bb       	out	0x15, r24	; 21
 4f6:	08 95       	ret
			}
			break;
			
			case 3: //DIO_PORTD
			if (DIO_PIN_HIGH == PinValue)
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	59 f4       	brne	.+22     	; 0x512 <DIO_setPinValue+0xd4>
			{
				SET_BIT(PORTD,PinId);
 4fc:	22 b3       	in	r18, 0x12	; 18
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_setPinValue+0xca>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_setPinValue+0xc6>
 50c:	82 2b       	or	r24, r18
 50e:	82 bb       	out	0x12, r24	; 18
 510:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,PinId);
 512:	22 b3       	in	r18, 0x12	; 18
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_setPinValue+0xe0>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_setPinValue+0xdc>
 522:	80 95       	com	r24
 524:	82 23       	and	r24, r18
 526:	82 bb       	out	0x12, r24	; 18
 528:	08 95       	ret

0000052a <writeHalfPort>:
		{
			LCD_sendChar((Local_reversed%10)+'0');
			Local_reversed /= 10;
		}while (Local_reversed != 1);
	} 
}
 52a:	cf 93       	push	r28
 52c:	c8 2f       	mov	r28, r24
 52e:	80 fd       	sbrc	r24, 0
 530:	06 c0       	rjmp	.+12     	; 0x53e <writeHalfPort+0x14>
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	64 e0       	ldi	r22, 0x04	; 4
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 53c:	05 c0       	rjmp	.+10     	; 0x548 <writeHalfPort+0x1e>
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 548:	c1 fd       	sbrc	r28, 1
 54a:	06 c0       	rjmp	.+12     	; 0x558 <writeHalfPort+0x2e>
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	65 e0       	ldi	r22, 0x05	; 5
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 556:	05 c0       	rjmp	.+10     	; 0x562 <writeHalfPort+0x38>
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	65 e0       	ldi	r22, 0x05	; 5
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 562:	c2 fd       	sbrc	r28, 2
 564:	06 c0       	rjmp	.+12     	; 0x572 <writeHalfPort+0x48>
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	66 e0       	ldi	r22, 0x06	; 6
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 570:	05 c0       	rjmp	.+10     	; 0x57c <writeHalfPort+0x52>
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	66 e0       	ldi	r22, 0x06	; 6
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 57c:	c3 fd       	sbrc	r28, 3
 57e:	06 c0       	rjmp	.+12     	; 0x58c <writeHalfPort+0x62>
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	67 e0       	ldi	r22, 0x07	; 7
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 58a:	05 c0       	rjmp	.+10     	; 0x596 <writeHalfPort+0x6c>
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	67 e0       	ldi	r22, 0x07	; 7
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <LCD_sendCmnd>:
 59a:	cf 93       	push	r28
 59c:	c8 2f       	mov	r28, r24
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 5b2:	8c 2f       	mov	r24, r28
 5b4:	82 95       	swap	r24
 5b6:	8f 70       	andi	r24, 0x0F	; 15
 5b8:	0e 94 95 02 	call	0x52a	; 0x52a <writeHalfPort>
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 5c6:	8f e9       	ldi	r24, 0x9F	; 159
 5c8:	9f e0       	ldi	r25, 0x0F	; 15
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_sendCmnd+0x30>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_sendCmnd+0x36>
 5d0:	00 00       	nop
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	63 e0       	ldi	r22, 0x03	; 3
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 5dc:	8c 2f       	mov	r24, r28
 5de:	0e 94 95 02 	call	0x52a	; 0x52a <writeHalfPort>
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	63 e0       	ldi	r22, 0x03	; 3
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 5ec:	8f e9       	ldi	r24, 0x9F	; 159
 5ee:	9f e0       	ldi	r25, 0x0F	; 15
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCD_sendCmnd+0x56>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <LCD_sendCmnd+0x5c>
 5f6:	00 00       	nop
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	63 e0       	ldi	r22, 0x03	; 3
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <LCD_init>:
 606:	2f e7       	ldi	r18, 0x7F	; 127
 608:	85 eb       	ldi	r24, 0xB5	; 181
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <LCD_init+0x6>
 614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_init+0x10>
 616:	00 00       	nop
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	62 e0       	ldi	r22, 0x02	; 2
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 95 02 	call	0x52a	; 0x52a <writeHalfPort>
 632:	41 e0       	ldi	r20, 0x01	; 1
 634:	63 e0       	ldi	r22, 0x03	; 3
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 63c:	8f e9       	ldi	r24, 0x9F	; 159
 63e:	9f e0       	ldi	r25, 0x0F	; 15
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <LCD_init+0x3a>
 644:	00 c0       	rjmp	.+0      	; 0x646 <LCD_init+0x40>
 646:	00 00       	nop
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	63 e0       	ldi	r22, 0x03	; 3
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 652:	88 e2       	ldi	r24, 0x28	; 40
 654:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_sendCmnd>
 658:	90 ef       	ldi	r25, 0xF0	; 240
 65a:	9a 95       	dec	r25
 65c:	f1 f7       	brne	.-4      	; 0x65a <LCD_init+0x54>
 65e:	8f e0       	ldi	r24, 0x0F	; 15
 660:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_sendCmnd>
 664:	20 ef       	ldi	r18, 0xF0	; 240
 666:	2a 95       	dec	r18
 668:	f1 f7       	brne	.-4      	; 0x666 <LCD_init+0x60>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_sendCmnd>
 670:	8f e3       	ldi	r24, 0x3F	; 63
 672:	9f e1       	ldi	r25, 0x1F	; 31
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <LCD_init+0x6e>
 678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_init+0x74>
 67a:	00 00       	nop
 67c:	86 e0       	ldi	r24, 0x06	; 6
 67e:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_sendCmnd>
 682:	08 95       	ret

00000684 <LCD_sendChar>:
 684:	cf 93       	push	r28
 686:	c8 2f       	mov	r28, r24
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	62 e0       	ldi	r22, 0x02	; 2
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 69c:	8c 2f       	mov	r24, r28
 69e:	82 95       	swap	r24
 6a0:	8f 70       	andi	r24, 0x0F	; 15
 6a2:	0e 94 95 02 	call	0x52a	; 0x52a <writeHalfPort>
 6a6:	41 e0       	ldi	r20, 0x01	; 1
 6a8:	63 e0       	ldi	r22, 0x03	; 3
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 6b0:	8f e9       	ldi	r24, 0x9F	; 159
 6b2:	9f e0       	ldi	r25, 0x0F	; 15
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCD_sendChar+0x30>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <LCD_sendChar+0x36>
 6ba:	00 00       	nop
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	63 e0       	ldi	r22, 0x03	; 3
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 6c6:	8c 2f       	mov	r24, r28
 6c8:	0e 94 95 02 	call	0x52a	; 0x52a <writeHalfPort>
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	63 e0       	ldi	r22, 0x03	; 3
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 6d6:	8f e9       	ldi	r24, 0x9F	; 159
 6d8:	9f e0       	ldi	r25, 0x0F	; 15
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_sendChar+0x56>
 6de:	00 c0       	rjmp	.+0      	; 0x6e0 <LCD_sendChar+0x5c>
 6e0:	00 00       	nop
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	63 e0       	ldi	r22, 0x03	; 3
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 1f 02 	call	0x43e	; 0x43e <DIO_setPinValue>
 6ec:	cf 91       	pop	r28
 6ee:	08 95       	ret

000006f0 <LCD_writeString>:
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	29 f4       	brne	.+10     	; 0x704 <LCD_writeString+0x14>
 6fa:	0c c0       	rjmp	.+24     	; 0x714 <LCD_writeString+0x24>
 6fc:	0e 94 42 03 	call	0x684	; 0x684 <LCD_sendChar>
 700:	cf 5f       	subi	r28, 0xFF	; 255
 702:	02 c0       	rjmp	.+4      	; 0x708 <LCD_writeString+0x18>
 704:	8c 01       	movw	r16, r24
 706:	c0 e0       	ldi	r28, 0x00	; 0
 708:	f8 01       	movw	r30, r16
 70a:	ec 0f       	add	r30, r28
 70c:	f1 1d       	adc	r31, r1
 70e:	80 81       	ld	r24, Z
 710:	81 11       	cpse	r24, r1
 712:	f4 cf       	rjmp	.-24     	; 0x6fc <LCD_writeString+0xc>
 714:	cf 91       	pop	r28
 716:	1f 91       	pop	r17
 718:	0f 91       	pop	r16
 71a:	08 95       	ret

0000071c <LCD_clear>:


void LCD_clear(void)
{
	// Clear Display
	LCD_sendCmnd(0b00000001);
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 722:	8f e3       	ldi	r24, 0x3F	; 63
 724:	9f e1       	ldi	r25, 0x1F	; 31
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <LCD_clear+0xa>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <LCD_clear+0x10>
 72c:	00 00       	nop
 72e:	08 95       	ret

00000730 <main>:


volatile u8 temp;
int main(void)
{
	CAR_INIT();
 730:	0e 94 49 00 	call	0x92	; 0x92 <CAR_INIT>
	
     
	 
    while (1) 
    {
			CAR_START(&temp);
 734:	8e e7       	ldi	r24, 0x7E	; 126
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 ad 00 	call	0x15a	; 0x15a <CAR_START>
 73c:	fb cf       	rjmp	.-10     	; 0x734 <main+0x4>

0000073e <UART_init>:

void UART_TxChar(u8 data)
{
	UDR = data;
	while(0 == GET_BIT(UCSRA,5));
}
 73e:	86 e8       	ldi	r24, 0x86	; 134
 740:	80 bd       	out	0x20, r24	; 32
 742:	8a b1       	in	r24, 0x0a	; 10
 744:	8b 7f       	andi	r24, 0xFB	; 251
 746:	8a b9       	out	0x0a, r24	; 10
 748:	87 e6       	ldi	r24, 0x67	; 103
 74a:	89 b9       	out	0x09, r24	; 9
 74c:	8a b1       	in	r24, 0x0a	; 10
 74e:	88 60       	ori	r24, 0x08	; 8
 750:	8a b9       	out	0x0a, r24	; 10
 752:	8a b1       	in	r24, 0x0a	; 10
 754:	80 61       	ori	r24, 0x10	; 16
 756:	8a b9       	out	0x0a, r24	; 10
 758:	08 95       	ret

0000075a <UART_RxChar>:


void UART_RxChar(u8* returnedData)
{
	if(returnedData != NULL)
 75a:	00 97       	sbiw	r24, 0x00	; 0
 75c:	29 f0       	breq	.+10     	; 0x768 <UART_RxChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,7));
 75e:	5f 9b       	sbis	0x0b, 7	; 11
 760:	fe cf       	rjmp	.-4      	; 0x75e <UART_RxChar+0x4>
		
		*returnedData = UDR;
 762:	2c b1       	in	r18, 0x0c	; 12
 764:	fc 01       	movw	r30, r24
 766:	20 83       	st	Z, r18
 768:	08 95       	ret

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
