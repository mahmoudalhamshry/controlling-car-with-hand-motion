
direct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000686  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001137  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096d  00000000  00000000  000021d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000783  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003947  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  74:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:


void ADC_init(void)
{
	// Select Vref = AVCC
	SET_BIT(ADMUX,6);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	87 b9       	out	0x07, r24	; 7
	
	// Select Right Adjustment
	CLR_BIT(ADMUX,5);
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	8f 7d       	andi	r24, 0xDF	; 223
  8c:	87 b9       	out	0x07, r24	; 7
	
	// Single Conversation Mode
	CLR_BIT(ADCSRA,5);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	8f 7d       	andi	r24, 0xDF	; 223
  92:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 For 16MHZ
	SET_BIT(ADCSRA,0);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	81 60       	ori	r24, 0x01	; 1
  98:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA,7);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	86 b9       	out	0x06, r24	; 6
  ac:	08 95       	ret

000000ae <ADC_getDigitalValue>:
}


void ADC_getDigitalValue(u8 channelNum, u16* digitalValue)
{
	if((channelNum<32) && (digitalValue != NULL))
  ae:	80 32       	cpi	r24, 0x20	; 32
  b0:	b0 f4       	brcc	.+44     	; 0xde <ADC_getDigitalValue+0x30>
  b2:	61 15       	cp	r22, r1
  b4:	71 05       	cpc	r23, r1
  b6:	99 f0       	breq	.+38     	; 0xde <ADC_getDigitalValue+0x30>
	{
		//Clear ADMUX Channel Bits
		ADMUX &= 0b11100000;
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	97 b9       	out	0x07, r25	; 7

		// Select Channel Number
		ADMUX |= channelNum;
  be:	97 b1       	in	r25, 0x07	; 7
  c0:	89 2b       	or	r24, r25
  c2:	87 b9       	out	0x07, r24	; 7
		
		// Start Conversition
		SET_BIT(ADCSRA,6);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	86 b9       	out	0x06, r24	; 6
		
		// Wait For The Flag Of ADC
		while(0 == GET_BIT(ADCSRA,4));
  ca:	34 9b       	sbis	0x06, 4	; 6
  cc:	fe cf       	rjmp	.-4      	; 0xca <ADC_getDigitalValue+0x1c>
		
		// Clear Flag
		SET_BIT(ADCSRA,4);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	86 b9       	out	0x06, r24	; 6
		
		// Read Digital Value
		*digitalValue = ADC_u16;
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	fb 01       	movw	r30, r22
  da:	91 83       	std	Z+1, r25	; 0x01
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <DIO_setPinDirection>:
#include "ATMEGA32_REG.h"
#include "DIO_interface.h"
							   
void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT) || 
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	08 f0       	brcs	.+2      	; 0xe6 <DIO_setPinDirection+0x6>
  e4:	72 c0       	rjmp	.+228    	; 0x1ca <DIO_setPinDirection+0xea>
  e6:	68 30       	cpi	r22, 0x08	; 8
  e8:	08 f0       	brcs	.+2      	; 0xec <DIO_setPinDirection+0xc>
  ea:	6f c0       	rjmp	.+222    	; 0x1ca <DIO_setPinDirection+0xea>
  ec:	42 30       	cpi	r20, 0x02	; 2
  ee:	08 f0       	brcs	.+2      	; 0xf2 <DIO_setPinDirection+0x12>
  f0:	6c c0       	rjmp	.+216    	; 0x1ca <DIO_setPinDirection+0xea>
   (PinDirection == DIO_PIN_INPUT)))
   {
	   switch(PortId)
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	01 f1       	breq	.+64     	; 0x136 <DIO_setPinDirection+0x56>
  f6:	30 f0       	brcs	.+12     	; 0x104 <DIO_setPinDirection+0x24>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	b1 f1       	breq	.+108    	; 0x168 <DIO_setPinDirection+0x88>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	09 f4       	brne	.+2      	; 0x102 <DIO_setPinDirection+0x22>
 100:	4c c0       	rjmp	.+152    	; 0x19a <DIO_setPinDirection+0xba>
 102:	08 95       	ret
	{
		case 0 :
		if(DIO_PIN_OUTPUT == PinDirection)
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA, PinId);
 108:	2a b3       	in	r18, 0x1a	; 26
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_setPinDirection+0x34>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_setPinDirection+0x30>
 118:	82 2b       	or	r24, r18
 11a:	8a bb       	out	0x1a, r24	; 26
 11c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA, PinId);
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x4a>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x46>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
		}
		break;
		
		case 1 :
		if(DIO_PIN_OUTPUT == PinDirection)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB, PinId);
 13a:	27 b3       	in	r18, 0x17	; 23
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPinDirection+0x66>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPinDirection+0x62>
 14a:	82 2b       	or	r24, r18
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB, PinId);
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0x7c>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0x78>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	87 bb       	out	0x17, r24	; 23
 166:	08 95       	ret
		}
		break;
		
		case 2 :
		if(DIO_PIN_OUTPUT == PinDirection)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC, PinId);
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_setPinDirection+0x98>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_setPinDirection+0x94>
 17c:	82 2b       	or	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC, PinId);
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_setPinDirection+0xae>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_setPinDirection+0xaa>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	84 bb       	out	0x14, r24	; 20
 198:	08 95       	ret
		}
		break;
		
		case 3 :
		if(DIO_PIN_OUTPUT == PinDirection)
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	59 f4       	brne	.+22     	; 0x1b4 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD, PinId);
 19e:	21 b3       	in	r18, 0x11	; 17
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_setPinDirection+0xca>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_setPinDirection+0xc6>
 1ae:	82 2b       	or	r24, r18
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD, PinId);
 1b4:	21 b3       	in	r18, 0x11	; 17
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_setPinDirection+0xe0>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_setPinDirection+0xdc>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	81 bb       	out	0x11, r24	; 17
 1ca:	08 95       	ret

000001cc <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH) || (PinValue == DIO_PIN_LOW)))
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <DIO_setPinValue+0x6>
 1d0:	72 c0       	rjmp	.+228    	; 0x2b6 <DIO_setPinValue+0xea>
 1d2:	68 30       	cpi	r22, 0x08	; 8
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <DIO_setPinValue+0xc>
 1d6:	6f c0       	rjmp	.+222    	; 0x2b6 <DIO_setPinValue+0xea>
 1d8:	42 30       	cpi	r20, 0x02	; 2
 1da:	08 f0       	brcs	.+2      	; 0x1de <DIO_setPinValue+0x12>
 1dc:	6c c0       	rjmp	.+216    	; 0x2b6 <DIO_setPinValue+0xea>
	{
		switch(PortId)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	01 f1       	breq	.+64     	; 0x222 <DIO_setPinValue+0x56>
 1e2:	30 f0       	brcs	.+12     	; 0x1f0 <DIO_setPinValue+0x24>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	b1 f1       	breq	.+108    	; 0x254 <DIO_setPinValue+0x88>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	09 f4       	brne	.+2      	; 0x1ee <DIO_setPinValue+0x22>
 1ec:	4c c0       	rjmp	.+152    	; 0x286 <DIO_setPinValue+0xba>
 1ee:	08 95       	ret
		{
			case 0: //DIO_PORTA
			if (DIO_PIN_HIGH == PinValue)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <DIO_setPinValue+0x3e>
			{
				SET_BIT(PORTA,PinId);
 1f4:	2b b3       	in	r18, 0x1b	; 27
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinValue+0x34>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinValue+0x30>
 204:	82 2b       	or	r24, r18
 206:	8b bb       	out	0x1b, r24	; 27
 208:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,PinId);
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0x4a>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0x46>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	8b bb       	out	0x1b, r24	; 27
 220:	08 95       	ret
			}
			break;
			
			case 1: //DIO_PORTB
			if (DIO_PIN_HIGH == PinValue)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <DIO_setPinValue+0x70>
			{
				SET_BIT(PORTB,PinId);
 226:	28 b3       	in	r18, 0x18	; 24
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_setPinValue+0x66>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_setPinValue+0x62>
 236:	82 2b       	or	r24, r18
 238:	88 bb       	out	0x18, r24	; 24
 23a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,PinId);
 23c:	28 b3       	in	r18, 0x18	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0x7c>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0x78>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	88 bb       	out	0x18, r24	; 24
 252:	08 95       	ret
			}
			break;
			
			case 2: //DIO_PORTC
			if (DIO_PIN_HIGH == PinValue)
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	59 f4       	brne	.+22     	; 0x26e <DIO_setPinValue+0xa2>
			{
				SET_BIT(PORTC,PinId);
 258:	25 b3       	in	r18, 0x15	; 21
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_setPinValue+0x98>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_setPinValue+0x94>
 268:	82 2b       	or	r24, r18
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,PinId);
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_setPinValue+0xae>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_setPinValue+0xaa>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	85 bb       	out	0x15, r24	; 21
 284:	08 95       	ret
			}
			break;
			
			case 3: //DIO_PORTD
			if (DIO_PIN_HIGH == PinValue)
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	59 f4       	brne	.+22     	; 0x2a0 <DIO_setPinValue+0xd4>
			{
				SET_BIT(PORTD,PinId);
 28a:	22 b3       	in	r18, 0x12	; 18
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_setPinValue+0xca>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_setPinValue+0xc6>
 29a:	82 2b       	or	r24, r18
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,PinId);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_setPinValue+0xe0>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_setPinValue+0xdc>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	82 bb       	out	0x12, r24	; 18
 2b6:	08 95       	ret

000002b8 <GLOVES_INIT>:
extern a0,a1,a2,a3,a4;
extern d0,d1,d2,d3,d4;

void GLOVES_INIT(void)
{
	DIO_setPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	
	
	DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	67 e0       	ldi	r22, 0x07	; 7
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	63 e0       	ldi	r22, 0x03	; 3
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	
	ADC_init();
 2ea:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_INPUT);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	65 e0       	ldi	r22, 0x05	; 5
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_INPUT);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	66 e0       	ldi	r22, 0x06	; 6
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN2,DIO_PIN_INPUT);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_INPUT);
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_INPUT);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	64 e0       	ldi	r22, 0x04	; 4
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	
	
	UART_init();
 320:	0e 94 19 03 	call	0x632	; 0x632 <UART_init>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);//rx
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);//tx
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_setPinDirection>
 338:	08 95       	ret

0000033a <GLOVES_START>:
}
void GLOVES_START(u8* d0,u8* d1,u8* d2,u8* d3,u8* d4,u8* a0,u8* a1,u8* a2,u8* a3,u8* a4)
{
 33a:	af 92       	push	r10
 33c:	bf 92       	push	r11
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	2a 97       	sbiw	r28, 0x0a	; 10
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	9a 83       	std	Y+2, r25	; 0x02
 360:	89 83       	std	Y+1, r24	; 0x01
 362:	7c 83       	std	Y+4, r23	; 0x04
 364:	6b 83       	std	Y+3, r22	; 0x03
 366:	5e 83       	std	Y+6, r21	; 0x06
 368:	4d 83       	std	Y+5, r20	; 0x05
 36a:	38 87       	std	Y+8, r19	; 0x08
 36c:	2f 83       	std	Y+7, r18	; 0x07
 36e:	1a 87       	std	Y+10, r17	; 0x0a
 370:	09 87       	std	Y+9, r16	; 0x09
	ADC_getDigitalValue(ADC_CHANNEL_4,&d0);
 372:	be 01       	movw	r22, r28
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	0e 94 57 00 	call	0xae	; 0xae <ADC_getDigitalValue>
	a0=((u32)d0*5000UL)/1024;
 37e:	a9 81       	ldd	r26, Y+1	; 0x01
 380:	ba 81       	ldd	r27, Y+2	; 0x02
 382:	28 e8       	ldi	r18, 0x88	; 136
 384:	33 e1       	ldi	r19, 0x13	; 19
 386:	0e 94 2b 03 	call	0x656	; 0x656 <__usmulhisi3>
 38a:	dc 01       	movw	r26, r24
 38c:	cb 01       	movw	r24, r22
 38e:	07 2e       	mov	r0, r23
 390:	7a e0       	ldi	r23, 0x0A	; 10
 392:	b6 95       	lsr	r27
 394:	a7 95       	ror	r26
 396:	97 95       	ror	r25
 398:	87 95       	ror	r24
 39a:	7a 95       	dec	r23
 39c:	d1 f7       	brne	.-12     	; 0x392 <GLOVES_START+0x58>
 39e:	70 2d       	mov	r23, r0
 3a0:	8c 01       	movw	r16, r24
	ADC_getDigitalValue(ADC_CHANNEL_5,&d1);
 3a2:	be 01       	movw	r22, r28
 3a4:	6d 5f       	subi	r22, 0xFD	; 253
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	0e 94 57 00 	call	0xae	; 0xae <ADC_getDigitalValue>
	a1=((u32)d1*5000UL)/1024;
 3ae:	ab 81       	ldd	r26, Y+3	; 0x03
 3b0:	bc 81       	ldd	r27, Y+4	; 0x04
 3b2:	28 e8       	ldi	r18, 0x88	; 136
 3b4:	33 e1       	ldi	r19, 0x13	; 19
 3b6:	0e 94 2b 03 	call	0x656	; 0x656 <__usmulhisi3>
 3ba:	dc 01       	movw	r26, r24
 3bc:	cb 01       	movw	r24, r22
 3be:	07 2e       	mov	r0, r23
 3c0:	7a e0       	ldi	r23, 0x0A	; 10
 3c2:	b6 95       	lsr	r27
 3c4:	a7 95       	ror	r26
 3c6:	97 95       	ror	r25
 3c8:	87 95       	ror	r24
 3ca:	7a 95       	dec	r23
 3cc:	d1 f7       	brne	.-12     	; 0x3c2 <GLOVES_START+0x88>
 3ce:	70 2d       	mov	r23, r0
 3d0:	7c 01       	movw	r14, r24
	ADC_getDigitalValue(ADC_CHANNEL_6,&d2);
 3d2:	be 01       	movw	r22, r28
 3d4:	6b 5f       	subi	r22, 0xFB	; 251
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	0e 94 57 00 	call	0xae	; 0xae <ADC_getDigitalValue>
	a2=((u32)d2*5000UL)/1024;
 3de:	ad 81       	ldd	r26, Y+5	; 0x05
 3e0:	be 81       	ldd	r27, Y+6	; 0x06
 3e2:	28 e8       	ldi	r18, 0x88	; 136
 3e4:	33 e1       	ldi	r19, 0x13	; 19
 3e6:	0e 94 2b 03 	call	0x656	; 0x656 <__usmulhisi3>
 3ea:	dc 01       	movw	r26, r24
 3ec:	cb 01       	movw	r24, r22
 3ee:	07 2e       	mov	r0, r23
 3f0:	7a e0       	ldi	r23, 0x0A	; 10
 3f2:	b6 95       	lsr	r27
 3f4:	a7 95       	ror	r26
 3f6:	97 95       	ror	r25
 3f8:	87 95       	ror	r24
 3fa:	7a 95       	dec	r23
 3fc:	d1 f7       	brne	.-12     	; 0x3f2 <GLOVES_START+0xb8>
 3fe:	70 2d       	mov	r23, r0
 400:	6c 01       	movw	r12, r24
	ADC_getDigitalValue(ADC_CHANNEL_7,&d3);
 402:	be 01       	movw	r22, r28
 404:	69 5f       	subi	r22, 0xF9	; 249
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	87 e0       	ldi	r24, 0x07	; 7
 40a:	0e 94 57 00 	call	0xae	; 0xae <ADC_getDigitalValue>
	a3=((u32)d3*5000UL)/1024;
 40e:	af 81       	ldd	r26, Y+7	; 0x07
 410:	b8 85       	ldd	r27, Y+8	; 0x08
 412:	28 e8       	ldi	r18, 0x88	; 136
 414:	33 e1       	ldi	r19, 0x13	; 19
 416:	0e 94 2b 03 	call	0x656	; 0x656 <__usmulhisi3>
 41a:	dc 01       	movw	r26, r24
 41c:	cb 01       	movw	r24, r22
 41e:	07 2e       	mov	r0, r23
 420:	7a e0       	ldi	r23, 0x0A	; 10
 422:	b6 95       	lsr	r27
 424:	a7 95       	ror	r26
 426:	97 95       	ror	r25
 428:	87 95       	ror	r24
 42a:	7a 95       	dec	r23
 42c:	d1 f7       	brne	.-12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42e:	70 2d       	mov	r23, r0
 430:	5c 01       	movw	r10, r24
	ADC_getDigitalValue(ADC_CHANNEL_2,&d4);
 432:	be 01       	movw	r22, r28
 434:	67 5f       	subi	r22, 0xF7	; 247
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	0e 94 57 00 	call	0xae	; 0xae <ADC_getDigitalValue>
	
	
	
	
	
	if((a0<2550)&&(a1>2300)&&(a2>2550)&&(a3>2550))
 43e:	06 3f       	cpi	r16, 0xF6	; 246
 440:	89 e0       	ldi	r24, 0x09	; 9
 442:	18 07       	cpc	r17, r24
 444:	10 f5       	brcc	.+68     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 446:	8d ef       	ldi	r24, 0xFD	; 253
 448:	e8 16       	cp	r14, r24
 44a:	88 e0       	ldi	r24, 0x08	; 8
 44c:	f8 06       	cpc	r15, r24
 44e:	e8 f0       	brcs	.+58     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 450:	87 ef       	ldi	r24, 0xF7	; 247
 452:	c8 16       	cp	r12, r24
 454:	89 e0       	ldi	r24, 0x09	; 9
 456:	d8 06       	cpc	r13, r24
 458:	c0 f0       	brcs	.+48     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 45a:	87 ef       	ldi	r24, 0xF7	; 247
 45c:	a8 16       	cp	r10, r24
 45e:	89 e0       	ldi	r24, 0x09	; 9
 460:	b8 06       	cpc	r11, r24
 462:	98 f0       	brcs	.+38     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	{
		UART_TxChar('a');//right
 464:	81 e6       	ldi	r24, 0x61	; 97
 466:	0e 94 27 03 	call	0x64e	; 0x64e <UART_TxChar>
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	67 e0       	ldi	r22, 0x07	; 7
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	63 e0       	ldi	r22, 0x03	; 3
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
 488:	96 c0       	rjmp	.+300    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
		
	}
	else if ((a1<2200)&&(a0<2450)&&(a2<2550)&&(a3<2600))
 48a:	88 e9       	ldi	r24, 0x98	; 152
 48c:	e8 16       	cp	r14, r24
 48e:	88 e0       	ldi	r24, 0x08	; 8
 490:	f8 06       	cpc	r15, r24
 492:	08 f5       	brcc	.+66     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 494:	02 39       	cpi	r16, 0x92	; 146
 496:	89 e0       	ldi	r24, 0x09	; 9
 498:	18 07       	cpc	r17, r24
 49a:	e8 f4       	brcc	.+58     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 49c:	86 ef       	ldi	r24, 0xF6	; 246
 49e:	c8 16       	cp	r12, r24
 4a0:	89 e0       	ldi	r24, 0x09	; 9
 4a2:	d8 06       	cpc	r13, r24
 4a4:	c0 f4       	brcc	.+48     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4a6:	88 e2       	ldi	r24, 0x28	; 40
 4a8:	a8 16       	cp	r10, r24
 4aa:	8a e0       	ldi	r24, 0x0A	; 10
 4ac:	b8 06       	cpc	r11, r24
 4ae:	98 f4       	brcc	.+38     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
	{
		UART_TxChar('b');//forward
 4b0:	82 e6       	ldi	r24, 0x62	; 98
 4b2:	0e 94 27 03 	call	0x64e	; 0x64e <UART_TxChar>
		
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	67 e0       	ldi	r22, 0x07	; 7
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	63 e0       	ldi	r22, 0x03	; 3
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
 4d4:	70 c0       	rjmp	.+224    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
	}
	else if((a2>2500)&&(a0>2500)&&(a1>2280)&&(a3>2600))
 4d6:	85 ec       	ldi	r24, 0xC5	; 197
 4d8:	c8 16       	cp	r12, r24
 4da:	89 e0       	ldi	r24, 0x09	; 9
 4dc:	d8 06       	cpc	r13, r24
 4de:	08 f1       	brcs	.+66     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 4e0:	05 3c       	cpi	r16, 0xC5	; 197
 4e2:	89 e0       	ldi	r24, 0x09	; 9
 4e4:	18 07       	cpc	r17, r24
 4e6:	e8 f0       	brcs	.+58     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 4e8:	89 ee       	ldi	r24, 0xE9	; 233
 4ea:	e8 16       	cp	r14, r24
 4ec:	88 e0       	ldi	r24, 0x08	; 8
 4ee:	f8 06       	cpc	r15, r24
 4f0:	c0 f0       	brcs	.+48     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 4f2:	89 e2       	ldi	r24, 0x29	; 41
 4f4:	a8 16       	cp	r10, r24
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	b8 06       	cpc	r11, r24
 4fa:	98 f0       	brcs	.+38     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
	{
		UART_TxChar('c');//stop
 4fc:	83 e6       	ldi	r24, 0x63	; 99
 4fe:	0e 94 27 03 	call	0x64e	; 0x64e <UART_TxChar>
		
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	62 e0       	ldi	r22, 0x02	; 2
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	67 e0       	ldi	r22, 0x07	; 7
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	63 e0       	ldi	r22, 0x03	; 3
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
 520:	4a c0       	rjmp	.+148    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
	}
	else if((a3<2550)&&(a0>2500)&&(a1>2280)&&(a2>2500))
 522:	86 ef       	ldi	r24, 0xF6	; 246
 524:	a8 16       	cp	r10, r24
 526:	89 e0       	ldi	r24, 0x09	; 9
 528:	b8 06       	cpc	r11, r24
 52a:	08 f5       	brcc	.+66     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 52c:	05 3c       	cpi	r16, 0xC5	; 197
 52e:	89 e0       	ldi	r24, 0x09	; 9
 530:	18 07       	cpc	r17, r24
 532:	e8 f0       	brcs	.+58     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 534:	89 ee       	ldi	r24, 0xE9	; 233
 536:	e8 16       	cp	r14, r24
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	f8 06       	cpc	r15, r24
 53c:	c0 f0       	brcs	.+48     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 53e:	85 ec       	ldi	r24, 0xC5	; 197
 540:	c8 16       	cp	r12, r24
 542:	89 e0       	ldi	r24, 0x09	; 9
 544:	d8 06       	cpc	r13, r24
 546:	98 f0       	brcs	.+38     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
	{
		UART_TxChar('d');//left
 548:	84 e6       	ldi	r24, 0x64	; 100
 54a:	0e 94 27 03 	call	0x64e	; 0x64e <UART_TxChar>
		
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	62 e0       	ldi	r22, 0x02	; 2
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	67 e0       	ldi	r22, 0x07	; 7
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	63 e0       	ldi	r22, 0x03	; 3
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
 56c:	24 c0       	rjmp	.+72     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
	}
	else if((a1<2200)&&(a0>2560)&&(a3>2600)&&(a2>2500))
 56e:	88 e9       	ldi	r24, 0x98	; 152
 570:	e8 16       	cp	r14, r24
 572:	88 e0       	ldi	r24, 0x08	; 8
 574:	f8 06       	cpc	r15, r24
 576:	f8 f4       	brcc	.+62     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 578:	01 30       	cpi	r16, 0x01	; 1
 57a:	1a 40       	sbci	r17, 0x0A	; 10
 57c:	e0 f0       	brcs	.+56     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 57e:	89 e2       	ldi	r24, 0x29	; 41
 580:	a8 16       	cp	r10, r24
 582:	8a e0       	ldi	r24, 0x0A	; 10
 584:	b8 06       	cpc	r11, r24
 586:	b8 f0       	brcs	.+46     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 588:	85 ec       	ldi	r24, 0xC5	; 197
 58a:	c8 16       	cp	r12, r24
 58c:	89 e0       	ldi	r24, 0x09	; 9
 58e:	d8 06       	cpc	r13, r24
 590:	90 f0       	brcs	.+36     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
	{
		UART_TxChar('e');//backword
 592:	85 e6       	ldi	r24, 0x65	; 101
 594:	0e 94 27 03 	call	0x64e	; 0x64e <UART_TxChar>
		
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	62 e0       	ldi	r22, 0x02	; 2
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 5a2:	41 e0       	ldi	r20, 0x01	; 1
 5a4:	67 e0       	ldi	r22, 0x07	; 7
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_setPinValue>
	}
 5b6:	2a 96       	adiw	r28, 0x0a	; 10
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	ff 90       	pop	r15
 5cc:	ef 90       	pop	r14
 5ce:	df 90       	pop	r13
 5d0:	cf 90       	pop	r12
 5d2:	bf 90       	pop	r11
 5d4:	af 90       	pop	r10
 5d6:	08 95       	ret

000005d8 <main>:
 u16 a0,a1,a2,a3,a4;
 u16 d0,d1,d2,d3,d4;
int main(void)
{
    
	 GLOVES_INIT();
 5d8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <GLOVES_INIT>
	
	  
    while (1)
    {
	    GLOVES_START(&d0,&d1,&d2,&d3,&d4,&a0,&a1,&a2,&a3,&a4);
 5dc:	82 e7       	ldi	r24, 0x72	; 114
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	9f 93       	push	r25
 5e2:	8f 93       	push	r24
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f4 e6       	ldi	r31, 0x64	; 100
 5e8:	8f 2e       	mov	r8, r31
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	9f 2e       	mov	r9, r31
 5ee:	f0 2d       	mov	r31, r0
 5f0:	0f 2e       	mov	r0, r31
 5f2:	fa e6       	ldi	r31, 0x6A	; 106
 5f4:	af 2e       	mov	r10, r31
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	bf 2e       	mov	r11, r31
 5fa:	f0 2d       	mov	r31, r0
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f2 e6       	ldi	r31, 0x62	; 98
 600:	cf 2e       	mov	r12, r31
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	df 2e       	mov	r13, r31
 606:	f0 2d       	mov	r31, r0
 608:	0f 2e       	mov	r0, r31
 60a:	fe e6       	ldi	r31, 0x6E	; 110
 60c:	ef 2e       	mov	r14, r31
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ff 2e       	mov	r15, r31
 612:	f0 2d       	mov	r31, r0
 614:	0c e6       	ldi	r16, 0x6C	; 108
 616:	10 e0       	ldi	r17, 0x00	; 0
 618:	20 e7       	ldi	r18, 0x70	; 112
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	46 e6       	ldi	r20, 0x66	; 102
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	60 e6       	ldi	r22, 0x60	; 96
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	88 e6       	ldi	r24, 0x68	; 104
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 9d 01 	call	0x33a	; 0x33a <GLOVES_START>
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	d5 cf       	rjmp	.-86     	; 0x5dc <main+0x4>

00000632 <UART_init>:
	SET_BIT(UCSRC_value,7);
	
	UCSRC = UCSRC_value;*/
	
	// writing the UCSRC , // selct UART MODE = Asynchronous , 	// configure no parity , // configure data bits = 8 , // configure stop bits = 1
	UCSRC = 0x86; // 0b10000110
 632:	86 e8       	ldi	r24, 0x86	; 134
 634:	80 bd       	out	0x20, r24	; 32
	CLR_BIT(UCSRB,2);
 636:	8a b1       	in	r24, 0x0a	; 10
 638:	8b 7f       	andi	r24, 0xFB	; 251
 63a:	8a b9       	out	0x0a, r24	; 10
	
	// set buad rate = 9600
	UBRRL = 103;
 63c:	87 e6       	ldi	r24, 0x67	; 103
 63e:	89 b9       	out	0x09, r24	; 9
	
	//Enable Tx
	SET_BIT(UCSRB,3);
 640:	8a b1       	in	r24, 0x0a	; 10
 642:	88 60       	ori	r24, 0x08	; 8
 644:	8a b9       	out	0x0a, r24	; 10
	
	//Enable Rx
	SET_BIT(UCSRB,4);
 646:	8a b1       	in	r24, 0x0a	; 10
 648:	80 61       	ori	r24, 0x10	; 16
 64a:	8a b9       	out	0x0a, r24	; 10
 64c:	08 95       	ret

0000064e <UART_TxChar>:
}


void UART_TxChar(u8 data)
{
	UDR = data;
 64e:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,5));
 650:	5d 9b       	sbis	0x0b, 5	; 11
 652:	fe cf       	rjmp	.-4      	; 0x650 <UART_TxChar+0x2>
}
 654:	08 95       	ret

00000656 <__usmulhisi3>:
 656:	0e 94 32 03 	call	0x664	; 0x664 <__umulhisi3>

0000065a <__usmulhisi3_tail>:
 65a:	b7 ff       	sbrs	r27, 7
 65c:	08 95       	ret
 65e:	82 1b       	sub	r24, r18
 660:	93 0b       	sbc	r25, r19
 662:	08 95       	ret

00000664 <__umulhisi3>:
 664:	a2 9f       	mul	r26, r18
 666:	b0 01       	movw	r22, r0
 668:	b3 9f       	mul	r27, r19
 66a:	c0 01       	movw	r24, r0
 66c:	a3 9f       	mul	r26, r19
 66e:	70 0d       	add	r23, r0
 670:	81 1d       	adc	r24, r1
 672:	11 24       	eor	r1, r1
 674:	91 1d       	adc	r25, r1
 676:	b2 9f       	mul	r27, r18
 678:	70 0d       	add	r23, r0
 67a:	81 1d       	adc	r24, r1
 67c:	11 24       	eor	r1, r1
 67e:	91 1d       	adc	r25, r1
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
